{"version":3,"sources":["TodoList.js","store/reducer.js","store/index.js","index.js"],"names":["TodoList","_this","this","react_default","a","createElement","value","props","inputValue","onChange","changeInputValue","onClick","handleClick","list","map","item","index","key","handleDelete","bind","Component","connect","state","dispatch","e","action","type","target","console","log","defaultState","store","createStore","arguments","length","undefined","newState","JSON","parse","stringify","push","splice","App","es","src_TodoList","ReactDOM","render","document","getElementById"],"mappings":"uNAGMA,mLAEK,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,MAAOJ,KAAKK,MAAMC,WAAYC,SAAUP,KAAKK,MAAMG,mBAC1DP,EAAAC,EAAAC,cAAA,UAAQM,QAAST,KAAKK,MAAMK,aAA5B,iBAEFT,EAAAC,EAAAC,cAAA,UAEIH,KAAKK,MAAMM,KAAKC,IAAI,SAACC,EAAMC,GACzB,OACEb,EAAAC,EAAAC,cAAA,MAAIY,IAAKD,EAAOL,QAASV,EAAKiB,aAAaC,KAAKlB,EAAMe,IAASD,4CAShEC,GACXd,KAAKK,MAAMW,aAAaF,UAvBLI,aAgERC,cApCS,SAACC,GACvB,MAAO,CACLd,WAAYc,EAAMd,WAClBK,KAAMS,EAAMT,OAMW,SAACU,GAC1B,MAAO,CACLb,iBADK,SACYc,GACf,IAAMC,EAAS,CACbC,KAAM,qBACNpB,MAAOkB,EAAEG,OAAOrB,OAElBiB,EAASE,IAEXb,YARK,WAYHW,EAHe,CACbG,KAAM,mBAIVR,aAdK,SAcQF,GACXY,QAAQC,IAAIb,GAKZO,EAJe,CACbG,KAAM,mBACNV,MAAOA,OAQAK,CAA6CrB,UCnEtD8B,EAAe,CACnBtB,WAAY,GACZK,KAAM,ICGOkB,EAHDC,YDIC,WAAkC,IAAjCV,EAAiCW,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBH,EAAcL,EAAWQ,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,GAAoB,uBAAhBV,EAAOC,KAA+B,CACxC,IAAMU,EAAWC,KAAKC,MAAMD,KAAKE,UAAUjB,IAE3C,OADAc,EAAS5B,WAAaiB,EAAOnB,MACtB8B,EAET,GAAoB,kBAAhBX,EAAOC,KAA0B,CACnC,IAAMU,EAAWC,KAAKC,MAAMD,KAAKE,UAAUjB,IAG3C,OAFAc,EAASvB,KAAK2B,KAAKJ,EAAS5B,YAC5B4B,EAAS5B,WAAa,GACf4B,EAET,GAAoB,qBAAhBX,EAAOC,KAA6B,CACtC,IAAMU,EAAWC,KAAKC,MAAMD,KAAKE,UAAUjB,IAE3C,OADAc,EAASvB,KAAK4B,OAAOhB,EAAOT,MAAO,GAC5BoB,EAET,OAAOd,IEjBHoB,EACJvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAUZ,MAAOA,GACf5B,EAAAC,EAAAC,cAACuC,EAAD,OAIJC,IAASC,OAAOJ,EAAKK,SAASC,eAAe","file":"static/js/main.bf83997b.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass TodoList extends Component {\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input value={this.props.inputValue} onChange={this.props.changeInputValue} />\n          <button onClick={this.props.handleClick}>提交</button>\n        </div>\n        <ul>\n          {\n            this.props.list.map((item, index) => {\n              return (\n                <li key={index} onClick={this.handleDelete.bind(this, index)}>{item}</li>\n              )\n            })\n          }\n        </ul>\n      </div>\n    )\n  }\n\n  handleDelete(index) {\n    this.props.handleDelete(index);\n  }\n}\n\n//  把store里面的state映射到组件的props里面\nconst mapStateToProps = (state) => {\n  return {\n    inputValue: state.inputValue,\n    list: state.list,\n  }\n}\n\n//  store.dispatch方法映射到props上\n//  接受的这个dispatch参数就是store.dispatch\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    changeInputValue(e) {\n      const action = {\n        type: 'change_input_value',\n        value: e.target.value\n      }\n      dispatch(action)\n    },\n    handleClick() {\n      const action = {\n        type: 'add_list_item',\n      }\n      dispatch(action)\n    },\n    handleDelete(index) {\n      console.log(index)\n      const action = {\n        type: 'delete_list_item',\n        index: index,\n      }\n      dispatch(action)\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TodoList)","const defaultState = {\n  inputValue: '',\n  list: []\n}\n\n\nexport default (state = defaultState, action) => {\n  if (action.type === 'change_input_value') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.inputValue = action.value;\n    return newState\n  }\n  if (action.type === 'add_list_item') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list.push(newState.inputValue);\n    newState.inputValue = '';\n    return newState\n  }\n  if (action.type === 'delete_list_item') {\n    const newState = JSON.parse(JSON.stringify(state));\n    newState.list.splice(action.index, 1)\n    return newState\n  }\n  return state\n}","import { createStore } from 'redux'\nimport reducer from './reducer'\nconst store = createStore(reducer)\n\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport TodoList from './TodoList';\nimport { Provider } from 'react-redux';\nimport store from './store'\n\nconst App = (\n  <Provider store={store}>\n    <TodoList />\n  </Provider>\n)\n\nReactDOM.render(App, document.getElementById('root'));\n\n"],"sourceRoot":""}